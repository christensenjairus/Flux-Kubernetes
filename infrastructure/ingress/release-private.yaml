apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: ingress-nginx
  namespace: ingress-nginx-private
spec:
  interval: 30m
  chart:
    spec:
      chart: ingress-nginx
      version: "*"
      sourceRef:
        kind: HelmRepository
        name: ingress-nginx
        namespace: ingress-nginx-private
      interval: 12h
  values:
    controller:
      kind: Deployment
      service:
        external:
          enabled: true
        type: LoadBalancer
        externalTrafficPolicy: Local
        annotations:
          io.cilium/lb-ipam-ips: "10.0.6.201"
        # labels:
        #   L2Announcement: "true"
      podAnnotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      ingressClassResource:
        name: "nginx-private"
        default: false
        controllerValue: "k8s.io/nginx-private"
      ingressClass: "nginx-private"
      resources:
        limits:
          cpu: 3000m
          memory: 4096Mi
        requests:
          cpu: 1500m
          memory: 2048Mi
      autoscaling:
        enabled: true
        minReplicas: 2
        maxReplicas: 10
        targetCPUUtilizationPercentage: 50
        targetMemoryUtilizationPercentage: 50
      keda:
        apiVersion: "keda.sh/v1alpha1"
        enabled: false
        minReplicas: 2
        maxReplicas: 10
        pollingInterval: 30
        cooldownPeriod: 300
        # fallback:
        #   failureThreshold: 3
        #   replicas: 11
        restoreToOriginalReplicaCount: false
        scaledObject:
          annotations: {}
          # Custom annotations for ScaledObject resource
          #  annotations:
          # key: value
        triggers: []
        # - type: prometheus
        #   metadata:
        #     serverAddress: http://<prometheus-host>:9090
        #     metricName: http_requests_total
        #     threshold: '100'
        #     query: sum(rate(http_requests_total{deployment="my-deployment"}[2m]))

        behavior: {}
        # scaleDown:
        #   stabilizationWindowSeconds: 300
        #   policies:
        #   - type: Pods
        #     value: 1
        #     periodSeconds: 180
        # scaleUp:
        #   stabilizationWindowSeconds: 300
        #   policies:
        #   - type: Pods
        #     value: 2
        #     periodSeconds: 60
      nodeSelector:
        nodeclass: general
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
        prometheusRule:
          enabled: false # Created separately
