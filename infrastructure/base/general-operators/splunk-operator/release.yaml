apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: splunk-operator
  namespace: general-operators
spec:
  install:
    crds: CreateReplace
  upgrade:
    crds: CreateReplace
  interval: 30m
  chart:
    spec:
      chart: splunk-operator
      version: "2.5.x"
      sourceRef:
        kind: HelmRepository
        name: splunk-operator
        namespace: general-operators
      interval: 12h
  values:

    splunk-operator:
      enabled: true

    # splunk image
    image:
      repository: docker.io/splunk/splunk:9.3 # Set your version here

    # The kube-rbac-proxy is a small HTTP proxy for a single upstream, that can perform RBAC
    # authorization against the Kubernetes API.
    # reference: https://github.com/brancz/kube-rbac-proxy
    kubeRbacProxy:

      # Specify kube-rbac-proxy image
      image:
        repository: gcr.io/kubebuilder/kube-rbac-proxy
        pullPolicy: IfNotPresent
        tag: "v0.13.1"

      # Set resource requests and limits for kube-rbac-proxy container
      resources:
        limits: {}
#          cpu: 500m
#          memory: 128Mi
        requests:
          cpu: 5m
          memory: 64Mi

    # splunk Operator configurations
    splunkOperator:

      # splunk operator image and pull policy
      # reference: https://github.com/splunk/splunk-operator
      image:
        repository: docker.io/splunk/splunk-operator:2.5.2
        pullPolicy: IfNotPresent

      # Set image pull secrets to pull image from a private registry
      imagePullSecrets: []

      # Give operator cluster-wide access, otherwise access is limited to operator namespace
      clusterWideAccess: true

      # List namespaces to be watched by splunk Operator e.x "namespace1,namespace2", must have cluster-wide access
      # Default watches the entire cluster
      watchNamespaces: ""

      # Add labels to splunk Operator deployment
      labels: {}

      # Add annotations to splunk Operator deployment
      annotations: {}

      # Add pod annotations to splunk Operator deployment pod
      podAnnotations: {}

      # Add pod labels to splunk Operator deployment pod
      podLabels: {}

      # Set security context for manager container, default ensures that no child process of manager can gain more privileges than manager
      # reference: https://kubernetes.io/docs/concepts/security/pod-security-policy/#privilege-escalation
      containerSecurityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        capabilities:
          drop:
            - "ALL"
          add:
            - "NET_BIND_SERVICE"
        seccompProfile:
          type: "RuntimeDefault"

      # Set security context for splunk Operator pod
      # reference: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#podsecuritycontext-v1-core
      securityContext:
        runAsUser: 1001
        fsGroup: 1001
        runAsNonRoot: true

      # Set usage of host networking and namespace
      # reference: https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces
      hostNetwork: false
      hostPID: false
      hostIPC: false

      # Define liveness probe to check if manager container is running
      # reference: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#types-of-probe
      livenessProbe:
        httpGet:
          path: /healthz
          port: 8081
        initialDelaySeconds: 15
        periodSeconds: 20

      # Define readiness probe to check if manager container is ready for requests
      # reference: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#types-of-probe
      readinessProbe:
        httpGet:
          path: /readyz
          port: 8081
        initialDelaySeconds: 60
        periodSeconds: 10

      # Define splunk operator manager service ports
      # reference: https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/
      service:
        type: ClusterIP
        ports:
        - name: http
          port: 80
          protocol: TCP
          targetPort: http
        - name: metric
          port: 8080
          protocol: TCP
          targetPort: 8080

      # Set resource requests and limits for manager container
      resources:
        limits:
          cpu: 1500m
          memory: 2000Mi
        requests:
          cpu: 1000m
          memory: 2000Mi

      # Specify nodes that can schedule the splunk Operator pod
      # reference: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
      nodeSelector:
        nodeclass: general

      # Specify splunk Operator pod tolerations
      # reference: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
      tolerations: []

      # Define affinity scheduling rules
      # reference: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#affinity-v1-core
      affinity: {}

      # Set duration in seconds the pod needs to terminate gracefully
      # reference: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#pod-v1-core
      terminationGracePeriodSeconds: 10

      # Set storageClassName for the PersistentVolumeClaim
      persistentVolumeClaim:
        storageClassName: "k8s-rbd"

      # Specify volumes for splunk Operator pod, append additional volumes to list
      # reference: https://kubernetes.io/docs/concepts/storage/volumes/
      volumes:
      - name: app-staging
        persistentVolumeClaim:
          claimName: splunk-operator-app-download
          storageClassName: k8s-rbd
    # - name:
    #   persistentVolumeClaim:
    #     claimName:

      # Specify volume mounts for the manager container, append additional volume mounts to list
      # reference: https://kubernetes.io/docs/tasks/configure-pod-container/configure-volume-storage/
      volumeMounts:
      - mountPath: /opt/splunk/appframework/
        name: app-staging
    # - mountPath:
    #   name:

    # Array with extra yaml to deploy with the chart. Evaluated as a template
    extraManifests: []
    # extraManifests:
    #  - apiVersion: cloud.google.com/v1beta1
    #    kind: BackendConfig
    #    metadata:
    #      name: "{{ .Release.Name }}-test"
    #    spec:
    #      securityPolicy:
    #        name: "gcp-cloud-armor-policy-test"

